{-# LANGUAGE DeriveDataTypeable, RecordWildCards #-}

-- Pentagonal numbers are generated by the formula, Pn=n(3n−1)/2. The first ten pentagonal numbers are:
-- 1, 5, 12, 22, 35, 51, 70, 92, 117, 145, ...
-- It can be seen that P4 + P7 = 22 + 70 = 92 = P8. However, their difference, 70 − 22 = 48, is not pentagonal.
-- Find the pair of pentagonal numbers, Pj and Pk, for which their sum and difference are pentagonal and D = |Pk − Pj| is minimised; what is the value of D?

import Test.HUnit ((@=?), assertBool, runTestTT, Test(..))
import Text.Printf (printf)
import System.Console.CmdArgs
import Data.Time (getCurrentTime, diffUTCTime)

import Data.List (find)
import Data.Maybe (catMaybes, isJust, fromJust)

data EulerArgs = 
    Euler 
    | Sums{ limit::Integer }
    | Diffs{ limit::Integer }
    | UnitTest
    deriving (Show, Data, Typeable)

problem0044 :: Integer
problem0044 = uncurry (+) $ head $ filter hasPentSum pentPairWithPentagonalDiff
    where
        hasPentSum = isPentagonal . uncurry (+)

pentPairWithPentagonalDiff :: [(Integer, Integer)]
pentPairWithPentagonalDiff = catMaybes $ map findPentDiff pentagonalNums

findPentDiff :: Integer -> Maybe (Integer, Integer)
findPentDiff p_a = if isJust p_b' then Just (p_c, p_b) else Nothing
    where
        p_b' = find (isPentagonal . (+p_a)) candidates
        candidates = takeWhile ((>) (2*p_a) . gap) pentagonalNums
        gap b = (floor $ sqrt $ fromIntegral (24 * b + 1)) + 1
        p_b = fromJust p_b'
        p_c = p_a + p_b

findPentDiffTest = [
    Nothing @=? findPentDiff 20,
    Just (92, 70) @=? findPentDiff 22,
    Just (70, 22) @=? findPentDiff 48]

isPentagonal :: Integer -> Bool
isPentagonal p = p == (head $ dropWhile (<p)  pentagonalNums)

isPentagonalTest = [
    True @=? isPentagonal 145,
    True @=? isPentagonal 70,
    True @=? isPentagonal 1,
    False @=? isPentagonal 2,
    False @=? isPentagonal 0]

pentagonalNums = [div (n * (3*n-1)) 2 | n <- [1,2..]]

unitTests = map TestCase $
    isPentagonalTest ++
    findPentDiffTest

exec :: EulerArgs -> IO ()
exec Euler = do
    let answer = problem0044
    printf "Answer: %d\n" answer
exec UnitTest = do 
    runTestTT $ TestList unitTests
    return ()

main :: IO ()
main = do
    args <- cmdArgs $ modes [Euler, Sums{ limit=100 }, Diffs{ limit=100 }, UnitTest]
    start <- getCurrentTime
    exec args
    stop <- getCurrentTime
    print $ diffUTCTime stop start

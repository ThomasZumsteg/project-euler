{-# LANGUAGE DeriveDataTypeable, RecordWildCards #-}

-- Pentagonal numbers are generated by the formula, Pn=n(3n−1)/2. The first ten pentagonal numbers are:
-- 1, 5, 12, 22, 35, 51, 70, 92, 117, 145, ...
-- It can be seen that P4 + P7 = 22 + 70 = 92 = P8. However, their difference, 70 − 22 = 48, is not pentagonal.
-- Find the pair of pentagonal numbers, Pj and Pk, for which their sum and difference are pentagonal and D = |Pk − Pj| is minimised; what is the value of D?

import Test.HUnit ((@=?), assertBool, runTestTT, Test(..))
import Text.Printf (printf)
import System.Console.CmdArgs
import Data.Time (getCurrentTime, diffUTCTime)

data EulerArgs = 
    Euler 
    | Sums{ limit::Int }
    | Diffs{ limit::Int }
    | UnitTest
    deriving (Show, Data, Typeable)

data PentPair = PentPair{ c::Integer, b::Integer } deriving (Eq, Show)

pentPairs = [PentPair (pent c) (pent b) | c <- [1..], b <- [1..(c-1)]]
add (PentPair c b) = (c - b)
sub (PentPair c b) = (c + b)

pent n = div (3 * n ^ 2 - n) 2
pentTest = [ [1,5,12,22,35,51,70,92,117,145] @=? map pent [1..10]]

problem0044 :: [PentPair]
problem0044 = error "Not Implemented"

unitTests = map TestCase $
    pentTest

exec :: EulerArgs -> IO ()
exec Euler = do
    let answer = add $ head problem0044
    printf "Answer: %d\n" answer
exec UnitTest = do 
    runTestTT $ TestList unitTests
    return ()

main :: IO ()
main = do
    args <- cmdArgs $ modes [Euler, Sums{ limit=100 }, Diffs{ limit=100 }, UnitTest]
    start <- getCurrentTime
    exec args
    stop <- getCurrentTime
    print $ diffUTCTime stop start

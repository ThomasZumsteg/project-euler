{-# LANGUAGE DeriveDataTypeable, RecordWildCards #-}

-- Pentagonal numbers are generated by the formula, Pn=n(3n−1)/2. The first ten pentagonal numbers are:
-- 1, 5, 12, 22, 35, 51, 70, 92, 117, 145, ...
-- It can be seen that P4 + P7 = 22 + 70 = 92 = P8. However, their difference, 70 − 22 = 48, is not pentagonal.
-- Find the pair of pentagonal numbers, Pj and Pk, for which their sum and difference are pentagonal and D = |Pk − Pj| is minimised; what is the value of D?

import Test.HUnit ((@=?), assertBool, runTestTT, Test(..))
import Text.Printf (printf)
import System.Console.CmdArgs
import Data.Time (getCurrentTime, diffUTCTime)

data EulerArgs = 
    Euler 
    | UnitTest
    deriving (Show, Data, Typeable)

problem0044 :: Integer
problem0044 = error "Not Implemented"

pentagonalDifferences :: [Integer]
pentagonalDifferences = filter isDifferenceOfPentagonal pentagonalNums

pentagonalSums :: [Integer]
pentagonalSums = filter isSumOfPentagonal pentagonalNums

isDifferenceOfPentagonal _ = True

isSumOfPentagonal _ = True

isPentagonal :: Integer -> Bool
isPentagonal p = p == (head $ dropWhile (<p)  pentagonalNums)

isPentagonalTest = [
    True @=? isPentagonal 145,
    True @=? isPentagonal 70,
    True @=? isPentagonal 1,
    False @=? isPentagonal 2,
    False @=? isPentagonal 0]

pentagonalNums = [div (n * (3*n-1)) 2 | n <- [1,2..]]

unitTests = map TestCase $
    isPentagonalTest

exec :: EulerArgs -> IO ()
exec Euler = do
    let answer = problem0044
    printf "Answer: %d\n" answer
exec UnitTest = do 
    runTestTT $ TestList unitTests
    return ()

main :: IO ()
main = do
    args <- cmdArgs $ modes [Euler, UnitTest]
    start <- getCurrentTime
    exec args
    stop <- getCurrentTime
    print $ diffUTCTime stop start

{-# LANGUAGE DeriveDataTypeable, RecordWildCards #-}

-- Pentagonal numbers are generated by the formula, Pn=n(3n−1)/2. The first ten pentagonal numbers are:
-- 1, 5, 12, 22, 35, 51, 70, 92, 117, 145, ...
-- It can be seen that P4 + P7 = 22 + 70 = 92 = P8. However, their difference, 70 − 22 = 48, is not pentagonal.
-- Find the pair of pentagonal numbers, Pj and Pk, for which their sum and difference are pentagonal and D = |Pk − Pj| is minimised; what is the value of D?

import Test.HUnit ((@=?), assertBool, runTestTT, Test(..))
import Text.Printf (printf)
import System.Console.CmdArgs
import Data.Time (getCurrentTime, diffUTCTime)

import Control.DeepSeq

data EulerArgs = 
    Euler 
    | Sums{ limit::Int }
    | Diffs{ limit::Int }
    | UnitTest
    | Time { limit::Int }
    deriving (Show, Data, Typeable)

data PentPair = PentPair{ c::Integer, b::Integer } deriving (Eq, Show)

insertWith :: (a -> a -> Ordering) -> [a] -> a -> [a]
insertWith _ [] ys = [ys]
insertWith f queue@(x:xs) y = case f y x of
    LT -> y : queue
    _  -> x : insertWith f xs y

insertWithTest = [
    [1..10] @=? (take 10 $ insertWith compare ([1..5]++[7..]) 6),
    [1..10] @=? insertWith compare ([1..5]++[7..10]) 6,
    [1..10] @=? insertWith compare [1..9] 10,
    [1..10] @=? insertWith compare [2..10] 1,
    [1] @=? insertWith compare [] 1]

pentPairs = [PentPair c b | 
    c <- pentagonalNums, 
    b <- (takeWhile (<c) pentagonalNums)]

add (PentPair c b) = (c + b)
sub (PentPair c b) = (c - b)

sums = filter (isPentagonal . add) pentPairs
subs = filter (isPentagonal . sub) pentPairs

problem0044 :: [PentPair]
problem0044 = filter subAndAdd pentPairs
    where
        subAndAdd p = (isPentagonal $ sub p) && (isPentagonal $ add p)

pentagonalNums :: [Integer]
pentagonalNums = map pent' [1..]
    where
        pent' n = div (3 * n ^ 2 - n) 2

pentagonalNumsTest = [
    [1,5,12,22,35,51,70,92,117,145] @=? (take 10 pentagonalNums)]

isPentagonal :: Integer -> Bool
isPentagonal 0 = False
isPentagonal n = n == (head $ dropWhile (<n) pentagonalNums)

isPentagonalTest = [
    False @=? (any isPentagonal [n | n <- [1..145],
        not $ elem n [1,5,12,22,35,51,70,92,117,145]]),
    True @=? (all isPentagonal [1,5,12,22,35,51,70,92,117,145]),
    True @=? isPentagonal 5,
    False @=? isPentagonal 2,
    True @=? isPentagonal 1,
    False @=? isPentagonal 0]

unitTests = map TestCase $
    pentagonalNumsTest ++
    isPentagonalTest ++
    insertWithTest

exec :: EulerArgs -> IO ()
exec Euler = do
    let answer = sub $ head problem0044
    printf "Answer: %d\n" answer
exec UnitTest = do 
    runTestTT $ TestList unitTests
    return ()
exec Sums{..} = do 
    mapM_ (\p -> printf "%d = %d + %d\n" (add p) (c p) (b p)) $ take limit sums
    return ()
exec Diffs{..} = do 
    mapM_ (\p -> printf "%d = %d - %d\n" (sub p) (c p) (b p)) $ take limit subs
    return ()
exec Time{..}= do
    let l = head $ force [isPentagonal 125137 | _ <- [1..limit]]
    print l
    return ()

main :: IO ()
main = do
    args <- cmdArgs $ modes [
        Euler,
        Sums{ limit=100 },
        Diffs{ limit=100 },
        UnitTest,
        Time{ limit=1000 }]
    start <- getCurrentTime
    exec args
    stop <- getCurrentTime
    print $ diffUTCTime stop start

{-# LANGUAGE DeriveDataTypeable, RecordWildCards #-}

import Test.HUnit ((@=?), assertBool, runTestTT, Test(..))
import Text.Printf (printf)
import System.Console.CmdArgs
import Data.Time (getCurrentTime, diffUTCTime)

-- Triangle, pentagonal, and hexagonal numbers are generated by the following formulae:
-- Triangle     Tn=n(n+1)/2     1, 3, 6, 10, 15, ...
-- Pentagonal   Pn=n(3n−1)/2    1, 5, 12, 22, 35, ...
-- Hexagonal    Hn=n(2n−1)      1, 6, 15, 28, 45, ...
-- It can be verified that T285 = P165 = H143 = 40755.
-- Find the next triangle number that is also pentagonal and hexagonal.

data EulerArgs = 
    Euler 
    | Triangle{ limit::Int }
    | Pentagonal{ limit::Int }
    | Hexagonal{ limit::Int }
    | UnitTest
    deriving (Show, Data, Typeable)

problem0045 :: [Integer]
problem0045 = error "Not Implemented"

triangle  = [ div (n*(  n+1)) 2 | n <- [1..]]
hexagonal = [ div (n*(3*n-1)) 2 | n <- [1..]]
pentagonal= [     (n*(2*n-1))   | n <- [1..]]

common :: (Ord a) => [[a]] -> [a]
common ((x:xs):[]) = [x]
common (xs@(x:xs'):ys@(y:ys'):zs) 
    | y < x  = common (xs:ys':zs)
    | y == x = common (xs:zs) ++ common (xs':ys':zs)
    | otherwise = common (xs':ys:zs)

commonTest = [
    [2,4,6] @=? common [[2,4,6]]]

unitTests = map TestCase $
    commonTest

exec :: EulerArgs -> IO ()
exec Euler = do
    let answer = head $ drop 1 problem0045
    printf "Answer: %d\n" answer
exec UnitTest = do 
    runTestTT $ TestList unitTests
    return ()
exec Triangle{..} = do 
    mapM_ print $ take limit triangle
exec Pentagonal{..} = do 
    mapM_ print $ take limit pentagonal
exec Hexagonal{..}= do
    mapM_ print $ take limit hexagonal

main :: IO ()
main = do
    args <- cmdArgs $ modes [
        Euler,
        Triangle{ limit=10 },
        Pentagonal{ limit=10 },
        Hexagonal{ limit=10 },
        UnitTest]
    start <- getCurrentTime
    exec args
    stop <- getCurrentTime
    print $ diffUTCTime stop start

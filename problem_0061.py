#!/usr/bin/env python3
"""
Triangle, square, pentagonal, hexagonal, heptagonal, and octagonal numbers are all figurate (polygonal) numbers and are generated by the following formulae:
    Triangle        P3,n=n(n+1)/2       1, 3,  6, 10, 15, ...
    Square          P4,n=n2             1, 4,  9, 16, 25, ...
    Pentagonal      P5,n=n(3n−1)/2      1, 5, 12, 22, 35, ...
    Hexagonal       P6,n=n(2n−1)        1, 6, 15, 28, 45, ...
    Heptagonal      P7,n=n(5n−3)/2      1, 7, 18, 34, 55, ...
    Octagonal       P8,n=n(3n−2)        1, 8, 21, 40, 65, ...
The ordered set of three 4-digit numbers: 8128, 2882, 8281, has three interesting properties.
The set is cyclic, in that the last two digits of each number is the first two digits of the next number (including the last number with the first).
Each polygonal type: triangle (P3,127=8128), square (P4,91=8281), and pentagonal (P5,44=2882), is represented by a different number in the set.
This is the only set of 4-digit numbers with this property.
Find the sum of the only ordered set of six cyclic 4-digit numbers for which each polygonal type: triangle, square, pentagonal, hexagonal, heptagonal, and octagonal, is represented by a different number in the set.
"""

import logging
import sys
import time


logging.basicConfig(
    stream=sys.stderr,
    level=logging.INFO,
    format='%(levelname)s: %(message)s')

def main():
    tests = [is_tri, is_square, is_pent, is_hex, is_hep, is_oct]
    cycle = len(tests)
    elements   = [None] * cycle
    generators = [None] * cycle
    i = 0
    while True:
        try: options = next(generators[i])
        except StopIteration as e:
            logging.debug("Iteration done: {}".format(e))
            i -= 1
        except TypeError as e:
            logging.debug("No iterator: {}".format(e))
            if generators[i] is None:
                generators[i] = new_gen(range(1000,10000), tests)
            else:
                raise e
        else:
            [elements[i],num_set,tests] = options
            logging.debug("Found element {} for index {}".format(elements[i],i))
            i += 1
            if i < 0: return None
            elif i >= cycle: break
            elif len(tests) <= 1:
                cd = str(elements[0])[:2]
                ab = str(elements[i-1] )[-2:]
                num_set = [int(ab+cd)]
            generators[i] = new_gen(num_set, tests)
    print("Answer {}: {!s}".format(sum(elements), elements))

def new_gen(num_set, tests):
    lead = "\t" * (3-len(tests))
    if len(num_set) > 1:
        logging.debug(lead +
            "Starting generator {} to {}".format(num_set[0],num_set[-1]))
    else:
        logging.debug(lead +
            "Starting generator {}".format(num_set[0]))
    logging.debug(lead + "Tests {!s}".format([t.__name__ for t in tests]))
    for i in num_set:
        if len(str(i)) < 4: continue
        for test in tests:
            if test(i):
                logging.debug(lead + "{} is {}".format(i, test.__name__))
                ab = str(i)[-2:]
                new_num_set = range(int(ab+'00'),int(ab+'99')+1)
                new_test = tests[:]
                new_test.remove(test)
                yield [i, new_num_set, new_test]
                if len(num_set)>1:
                    logging.debug(lead +
                        "Test range {} to {} done".format( num_set[0],num_set[-1]))
                else:
                    logging.debug(lead + "Test range {} done".format(num_set[0]))

def is_tri(m):
    n  = round((2*m+0.25)**(1.0/2)-0.5)
    nm = n*(n+1)/2
    if nm == m: return True
    else:       return False

def is_square(m):
    n  = round(m**0.5)
    nm = n**2
    if nm == m: return True
    else:       return False

def is_pent(m):
    n  = round(((2*m+1.0/6)/3.0)**0.5+1.0/6)
    nm = n*(3*n-1)/2
    if nm == m: return True
    else:       return False

def is_hex(m):
    n  = round((m/2.0+1.0/16)**0.5+0.25)
    nm = n*(2*n-1)
    if nm == m: return True
    else:       return False

def is_hep(m):
    n  = round((2*m/5.0+9.0/100)**0.5+3.0/10)
    nm = n*(5*n-3)/2
    if nm == m: return True
    else:       return False

def is_oct(m):
    n  = round((m/3.0+1.0/9)**0.5+1.0/3)
    nm = n*(3*n-2)
    if nm == m: return True
    else:       return False

if __name__ == "__main__":
    start = time.time()
    main()
    logging.info("That took {:4.2f} seconds".format(time.time() - start))
